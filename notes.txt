RIA (Rich Internet Applications)

JavaScript

Data Types
    Number, String, Boolean, Object, Undefined & Function
Programming Constructs
    var, if else, for, while, switch case, try catch finally, throw, function
APIs
    Date, Array, Math, RegEx, timer (setTimeout, clearTimeout, setInterval, clearInterval), Error


Language Categories
    Line Oriented
    Procedural
    Object Based
    Object Oriented
    Functional
        functions are first class citizens
        functions can be treated like data (object)


    static
    dynamic

    strongly typed
    loosely typed




class Employee{
    public int id;
    public string name;
    public float salary;
}

Employee emp = new Employee();
emp.id = 200;
emp.city = 'Bangalore'



int x = 0;

x = "asfddaf"

var x ;

x = 100;
x = 'abc';
x = true;
x = {}
x = function(){}


arguments, this
arguments
    => array like object
        arguments[0]
        arguments[1]
        arguments.length

this 
    => invocation context

In JS, it doesnot matter who owns the function or where the function is
        what matters is how the function is invoked
    
Function invocation patterns
    As a method of an obj
        then this => obj

    As a function
        then this => global scope (window in the browser)

    Using the 'call' method of the function

    Using the 'apply' method of the function


Closures

    clickTracker.html
        Track [button]
        div

Closure - assignment

create an object and assign it to a variable called 'spinner'
    var spinner = /*.....*/

The spinner object must exhibit two methods
    up() 
    down()

the behavior of the methods should be as follows

spinner.up() => 1
spinner.up() => 2
spinner.up() => 3

spinner.down() => 2
spinner.down() => 1
spinner.down() => 0
spinner.down() => -1

There should be no way by which one can influence the outcome of the up or down methods

the following should NOT be possible

spinner.counter = 10000
spinner.up() => should NOT return 10001

OR

counter = 10000
spinner.up() => should NOT return 10001


//closure - solution
var spinner = (function(){
    var counter = 0;

    function up(){
        return ++counter;
    }

    function down(){
        return --counter;
    }

    return {
        up : up,
        down : down
    }
})();

function spinnerFactory(){
    var counter = 0;

    function up(){
        return ++counter;
    }

    function down(){
        return --counter;
    }

    return {
        up : up,
        down : down
    }
}

Memoization

Pure functions
    => If a function's invocation can be replaced by its result

constructor functions
    invoked with a 'new' keyword
        this -> new object
        this -> returned by default


Prototypal Inheritance

ES6 (ES2015, ESNext, EcmaScript6)
1. let
2. const
3. Array destructuring
4. rest operator (array)
5. spread operator (array)
6. Object destructuring
7. rest operator (Object)
8. spread operator (Object)
9. object constructor
10. default arguments
11. arrow functions
12. template strings
13. class

http://es6-features.org/

Array methods
    forEach
    map
    reduce
    filter

jQuery

Sync model state changes with the view
    1. Incremental
            + Efficient
            - Imperative
    2. All in one
            - Inefficient
            + Declarative

React = Efficient + Declarative

zen coding

HTML & JSX
every open tag must have a close tag
'for' attribute to be replaced with 'htmlFor'
'class' attribute to be replaced with 'className'


Conver the following into a Greeter component and render it

<h1>Greeter</h1>
<hr>
<label for="">User Name :</label>
<input type="text" name="" id="">
<input type="button" value="Greet">
<div class="highlight">[Greet Message]</div>


Day-2 Assignment
Conver the following into a functioning react component

<section>
    <div class="field">
        <label for="">Basic :</label>
        <input type="number" name="" id="txtBasic">
    </div>
    <div class="field">
        <label for="">HRA :</label>
        <input type="number" name="" id="txtHra">
    </div>
    <div class="field">
        <label for="">DA :</label>
        <input type="number" name="" id="txtDa">
    </div>
    <div class="field">
        <label for="">Tax :</label>
        <input type="range" name="" id="rangeTax" min="0" max="30">
    </div>
    <div class="field">
        <input type="button" value="Calculate" id="btnCalculate">
    </div>
    <div class="field">
        <table>
            <tbody>
                <tr>
                    <td id="tdBasic">[Basic]</td>
                    <td id="tdHra">[HRA]</td>
                    <td id="tdDa">[DA]</td>
                    <td id="tdTax">[Tax]</td>
                    <td id="tdSalary">[Salary]</td>
                </tr>
            </tbody>
        </table>
    </div>
</section>


State
    => UI State
        - Supports the pressentation logic of the application
        - Very less likely that this state might be needed in other parts of the application
        - It is OK to use the component state for this data

    => App State
        - Supports the business logic of the application
        - Very Highly likely that this state might be needed in other parts of the application
        - It is NOT OK to use the component state for this data


http://bit.ly/react-videos


Assignment:
Solve the below using (state-manager.js / redux.js)

<h3>Calculator</h3>
<hr>
<input type="number" name="" id="">
<input type="number" name="" id="">
<br>
<input type="button" value="Add">
<input type="button" value="Subtract">
<input type="button" value="Multiply">
<input type="button" value="Divide">
<div>[result]</div>

Hooks
    functions to handle side effects in functional components
    hook name has to start with 'use'
    Builtin hooks
        useState
        useEffect
        useMemo,
        useReducer

create-react-app 

npx create-react-app  my-app

npm, yarn

to install yarn
    npm install yarn -g

ES6 Modules
    1. Everything defined in a file is considered private
    2. Public entites need to be explicity exported
    3. To use the entities defined in other files, they have to be explicity imported

npm uninstall create-react-app -g

to install redux
    yarn add redux
        OR
    npm install redux

react-redux
    connect
    Provider

Container components / Smart Components
    receive the data from the store (using the connect API)
    advisable to have fewer container components

Presentation Components / Dumb components
    receive the data & action dispatchers from the parent component


Component Lifecycle methods
    Mounted
    Updated
    Unmounted

Mounted
    componentWillMount
    componentDidMount

Updated
    componentShouldUpdate
    componentWillUpdate

Unmounted
    componentWillUnmount


Redux Middleware
    Any functionality that is common for all the actions


m1(action) -> m2(action) -> m3(action) -> dispatch(action)

json-server
    expose an endpoint for a restful service based on the data from a json file

from the folder containing the data file (db.json)
    > npx json-server db.json -p 3030


Asynchronous Programming
    Asynchronous Operation
        Non Blocking Operation
        An operation that is initiated but not wait for its completion


    |
    |
    - - - - - - - > - - - - - - - -|
                                   |
                                   |
                                   |
    - - - - - - - < - - - - - - - -                               
    |
    |

    1. callbacks
    2. event emitters
    3. promises
    4. async await
    5. generators
    6. observables

Using axios
    yarn add axios


//to get all the bugs
axios.get('http://localhost:3030/bugs')
        .then(response => response.data)
        .then(bugs => console.table(bugs))

//to get one bug by id
axios.get('http://localhost:3030/bugs/1')
        .then(response => response.data)
        .then(bug => console.log(bug))


//to create a new bug
const newBugData = {
    id : 0,
    name : 'Axios is not working',
    isClosed : false,
    createdAT : new Date()
}
axios.post('http://localhost:3030/bugs', newBugData)
    .then(response => response.data)
    .then(newBug => console.log(newBug))

//to update a bug
const updatedBugData = {
    id : 3,
    name : 'Axios is not working from the beginning',
    isClosed : true,
    createdAT : new Date()
}
axios.put('http://localhost:3030/bugs/3', updatedBugData)
    .then(response => response.data)
    .then(newBug => console.log(newBug))

//to delete a bug
axios.delete('http://localhost:3030/bugs/3')
    .then(response => response.data)
    .then(x => console.log(x))